Review Types and Operators
Let's take one more glance at the concepts we just learned:

There are three essential data types in JavaScript: strings, numbers, and booleans.
We can write out anything to the console with console.log.
We can do math with operators like +, -, *, and /.
We can find the remainder after dividing two numbers with a modulus: %.
We can generate a random number with Math.random, then make it a whole number with Math.floor.
We write a single line comment with // and a multi-line comment with /* and */.


Review Variables
You made it to the end of the first unit and this lesson! High five!

We learned:

How to create variables.
How to change a variable's value.
How to interpolate, or insert, a variable into a string.

______________________________________________________________________________________________________________________________________
var moonPhase = 'full';
var foggyNight = false;

if (moonPhase === 'full' && foggyNight) {
  console.log('Howwlll!');
} else if (moonPhase === 'mostly full') {
  console.log('Arms and legs are getting hairier');
} else if (moonPhase === 'mostly new') { 
  console.log('Back on two feet');
} else {
  console.log('Invalid moon phase');
}

OR

var moonPhase = 'full';

switch (moonPhase) {
 case 'full':
    console.log('Howwwwlll!!');
    break;
 case 'mostly full':
    console.log('Arms and legs are getting harrier');
    break;
 case 'mostly new':
    console.log('Back on two feet');
    break;
  default:
    console.log('Invalid moon phase');
    break;
}

Review Control Flow
Way to go! We just learned a lot of control flow concepts:

if/else statements make binary decisions and execute separate code based on a condition.
We can add extra conditions with to if/else statements with else if conditions.
switch statements make complicated if/else statements easier to read, however they achieve the same result as if/else statements.
Comparison operators, like <, >, <=, and >= can compare two variables. After they compare, they always return either true or false.
Logical Operators, like &&, ||, !==, and !, can compare two variables to see if a certain condition exists:
&& checks if both sides are true.
|| checks if either side is true.
!== checks if both sides are not equal.
! changes a variable that is true to false, and vice versa.
______________________________________________________________________________________________________________________________________

var orderCount = 0;

function takeOrder(topping, crustType) {
  console.log('Order: ' + crustType + ' crust topped with ' + topping);
  orderCount = orderCount + 1;
}

function getSubTotal(itemCount) {
  return itemCount * 7.5;
}

takeOrder('bacon', 'thin');
takeOrder('pepperoni', 'regular');
takeOrder('pesto', 'thin');

console.log(getSubTotal(orderCount));

var orderCount = 0;

function takeOrder(topping, crustType) {
  console.log('Order: ' + crustType + ' crust topped with ' + topping);
  orderCount = orderCount + 1;
}

function getSubTotal(itemCount) {
  return itemCount * 7.5;
}

function getTax() {
  return getSubTotal(orderCount) * 0.06;
}

function getTotal() {
  return getSubTotal(orderCount) + getTax();
}


takeOrder('bacon', 'thin');
takeOrder('pepperoni', 'regular');
takeOrder('pesto', 'thin');

console.log(getSubTotal(orderCount));
console.log(getTotal());

Review Functions
This unit introduced you to functions.

Functions are written to perform a task.
Functions take data or variables, perform a set of tasks on them, and then return the result.
We can define parameters when calling the function.
When calling a function, we can pass in arguments, which will set the function's parameters.
We can use return to return the result of a function which allows us to call functions anywhere, even inside other functions.
______________________________________________________________________________________________________________________________________

var laundryRoom = 'Basement';
var mailRoom = 'Room 1A';

var myApartment = function() {
  var mailBoxNumber = 'Box 3';
  var laundryRoom = 'In-unit';
  console.log('Mail box: ' + mailBoxNumber + ', Laundry:' + laundryRoom);
};

myApartment();



function myApartment() {
	var myCoffeeMaker = 'Aeropress';
	
	var myCloset = 'Extra coats in the back';
	
	var myRefridgerator = 'Filled with veggies and dark chocolate.';
	var myDog = 'Nikko';
	
}

var buildingLaundryCode = 4927;
var buildingAddress = '150 E 14th St, New York, NY';
var buildingPhone = '(481) 516-2342';



// Do not edit the code after this line
console.log("**Apartment Building Information**");
console.log("Laundry code: " + buildingLaundryCode + "\nPhone: " + buildingPhone + "\nMailing address: " + buildingAddress);



Review Scope
This unit introduced you to scope.

Scope is the idea in programming that some variables are acessible/inaccessible from other parts of the program.
Global Scope refers to variables that are accessible to every part of the program.
Functional Scope refers to variables created inside functions, which are not accessible outside of its block.
______________________________________________________________________________________________________________________________________

